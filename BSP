import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class improved {
    public List<Point2D> splittoGetHere = new ArrayList<>();
    public improved right = null;
    public improved left = null;
    public List<List<Point2D>> spitsInNode = new ArrayList<>();

    List<polygons> shapesin = new ArrayList<>();
    //shapesin is a list of all the shapes that are part of this section of the grid
    public class polygons{
        public List<Point2D> boundries;
    }
    public void toString(int numdeep){
        if (this == null){
            System.out.println("null");
        }
        else {
            System.out.println("The split line for me is " + this.splittoGetHere.toString());
            List<polygons> listofshapes = this.shapesin;
            System.out.println(listofshapes.size());
            if (listofshapes.size() == 1){
                System.out.println(listofshapes.get(0).boundries.toString());

            }
            if (this.right != null) {
                System.out.println("print my .right - " + numdeep);
                this.right.toString(numdeep + 1);
            } else {
                System.out.println("my .right is null - " + numdeep);
            }
            if (this.left != null) {
                System.out.println("print my .left - " + numdeep);
                this.left.toString(numdeep + 1);
            } else {
                System.out.println(".left is null - " + numdeep);
            }
        }
    }
    public static void recursivelysplit(improved side){
        if (side.spitsInNode.isEmpty()){
        }
        else{
            List<improved> bouttosplit = side.split(side);
            side.right = bouttosplit.get(0);
            side.left = bouttosplit.get(1);
            if (side.right.spitsInNode.size() != 0) {
                recursivelysplit(side.right);
            }
            if (side.left.spitsInNode.size() != 0) {
                recursivelysplit(side.left);
            }
        }
    }

    private List<improved> split(improved input) {
        List<Point2D> linetosplit = input.spitsInNode.get(0);
        if (shapesin.size() != 0){
            polygons shapespliton = this.shapesin.get(0);
            int numberofPoints = shapespliton.boundries.size();
        }
        //System.out.println("yo");
        List<polygons> shapesright = new ArrayList<>();
        List<polygons> shapesleft = new ArrayList<>();
        double x1 = linetosplit.get(0).getX();
        double y1 = linetosplit.get(0).getY();
        double x2 = linetosplit.get(1).getX();
        double y2 = linetosplit.get(1).getY();

        String angle = "";
        if (x1 == x2){
            angle = "Vertical";
        }
        if (y1 == y2){
            angle = "Horizontal";
        }
        //System.out.println(angle);

        improved left = new improved();
        improved right = new improved();
                //we have a straight line we will split on that is not on the edge
                //now we find all shapes that are on each side of line
                int numpolys = this.shapesin.size();
                //System.out.println(numpolys + " poly");
                for (int j = 0; j < numpolys; j++) {
                    polygons polycheck = this.shapesin.get(j);
                    double[] midpoint = findmid(polycheck.boundries);
                    //System.out.println(Arrays.toString(midpoint));
                    if (angle == "Horizontal") {
                        if (midpoint[1] > y1) {
                            shapesleft.add(polycheck);
                            //System.out.println("left");
                        } else {
                            shapesright.add(polycheck);
                            //System.out.println("right");
                        }
                    } else if (angle == "Vertical") {
                        if (midpoint[0] < x1) {
                            shapesleft.add(polycheck);
                            //System.out.println("left");
                        } else {
                            shapesright.add(polycheck);
                            //System.out.println("right");
                        }
                    }
                }
        //System.out.println(x1 + " " + y1 + " " + x2 + " " + y2);
                    for (int s = 1; s < this.spitsInNode.size(); s++) {
                        List<Point2D> moveline = spitsInNode.get(s);
                        double[] lineinfo = findmid(moveline);
                        if (angle == "Vertical") {
                            if (lineinfo[0] > x1) {
                                right.spitsInNode.add(moveline);
                                //System.out.println("rightdfd");
                            } else {
                                left.spitsInNode.add(moveline);
                                //System.out.println("leftfdf");
                            }
                        }
                        else if (angle == "Horizontal") {
                            if (lineinfo[1] > y1) {
                                left.spitsInNode.add(moveline);
                                //System.out.println("leftdfd");
                            } else {
                                right.spitsInNode.add(moveline);
                                //System.out.println("righthgh");
                            }
                        }
                        else{
                            //for angled split
                            //System.out.println("mmmmm");
                            //System.out.println(Arrays.toString(lineinfo));
                            //System.out.println(moveline);
                            double[] splitinfo = findmid(linetosplit);
                            if (lineinfo[0] >= splitinfo[0]){
                                //left
                                left.spitsInNode.add(moveline);
                                //System.out.println("left last");
                            }
                            else{
                                right.spitsInNode.add(moveline);
                                //System.out.println("right last");
                            }
                        }
                    }
            left.shapesin = shapesleft;
            right.shapesin = shapesright;
            right.splittoGetHere = linetosplit;
            left.splittoGetHere = linetosplit;
            List<improved>  ret = new ArrayList<>();
            ret.add(right);
            ret.add(left);
        //System.out.println("bruh");
            return ret;
    }

    public static double[] findmid(List<Point2D> check){
        int totalpoints = check.size();
        double x = 0;
        double y = 0;
        for (int i = 0; i < totalpoints; i++){
            x += check.get(i).getX();
            y += check.get(i).getY();
        }
        x /= totalpoints;
        y /= totalpoints;
        //System.out.println(x + " " + y);
        return new double[]{x, y};
    }

    public void addpoly(List<Point2D> input){
        polygons weep = new polygons();
        weep.boundries = input;
        this.shapesin.add(weep);
    }
    public static void main(String args[]){
        improved head = new improved();
        //shape 1 from reading
        Point2D.Double s1bL = new Point2D.Double(0, 5);
        Point2D.Double s1tL = new Point2D.Double(0, 0);
        Point2D.Double s1tR = new Point2D.Double(100, 0);
        Point2D.Double s1bR = new Point2D.Double(100, 5);
        List<Point2D> list1 = new ArrayList<Point2D>();
        list1.add(s1bL);
        list1.add(s1tL);
        list1.add(s1tR);
        list1.add(s1bR);
        head.addpoly(list1);
        //shape 2 from reading
        Point2D.Double s2bL = new Point2D.Double(0, 100);
        Point2D.Double s2tL = new Point2D.Double(0, 0);
        Point2D.Double s2tR = new Point2D.Double(5, 0);
        Point2D.Double s2bR = new Point2D.Double(5, 100);
        List<Point2D> list2 = new ArrayList<Point2D>();
        list2.add(s2bL);
        list2.add(s2tL);
        list2.add(s2tR);
        list2.add(s2bR);
        head.addpoly(list2);
        //shape 3 from reading
        Point2D.Double s3bL = new Point2D.Double(95, 100);
        Point2D.Double s3tL = new Point2D.Double(95, 0);
        Point2D.Double s3tR = new Point2D.Double(100, 100);
        Point2D.Double s3bR = new Point2D.Double(100, 100);
        List<Point2D> list3 = new ArrayList<Point2D>();
        list3.add(s3bL);
        list3.add(s3tL);
        list3.add(s3tR);
        list3.add(s3bR);
        head.addpoly(list3);
        //shape 4 from reading
        Point2D.Double s4bL = new Point2D.Double(0, 100);
        Point2D.Double s4tL = new Point2D.Double(0, 95);
        Point2D.Double s4tR = new Point2D.Double(100, 95);
        Point2D.Double s4bR = new Point2D.Double(100, 100);
        List<Point2D> list4 = new ArrayList<Point2D>();
        list4.add(s4bL);
        list4.add(s4tL);
        list4.add(s4tR);
        list4.add(s4bR);
        head.addpoly(list4);
        //shape 5
        Point2D.Double s5bL = new Point2D.Double(5, 95);
        Point2D.Double s5tL = new Point2D.Double(5, 5);
        Point2D.Double s5tR = new Point2D.Double(50, 5);
        Point2D.Double s5bR = new Point2D.Double(50, 95);
        List<Point2D> list5 = new ArrayList<Point2D>();
        list5.add(s5bL);
        list5.add(s5tL);
        list5.add(s5tR);
        list5.add(s5bR);
        head.addpoly(list5);
        //shape 6
        Point2D.Double s6bL = new Point2D.Double(50, 95);
        Point2D.Double s6tL = new Point2D.Double(50, 70);
        Point2D.Double s6tR = new Point2D.Double(95, 70);
        Point2D.Double s6bR = new Point2D.Double(95, 95);
        List<Point2D> list6 = new ArrayList<Point2D>();
        list6.add(s6bL);
        list6.add(s6tL);
        list6.add(s6tR);
        list6.add(s6bR);
        head.addpoly(list6);
        //shape 7
        Point2D.Double s7bL = new Point2D.Double(70, 70);
        Point2D.Double s7tL = new Point2D.Double(50, 50);
        Point2D.Double s7tR = new Point2D.Double(50, 5);
        Point2D.Double s7bR = new Point2D.Double(95, 5);
        Point2D.Double s7bRR = new Point2D.Double(95, 95);
        List<Point2D> list7 = new ArrayList<Point2D>();
        list7.add(s7bL);
        list7.add(s7tL);
        list7.add(s7tR);
        list7.add(s7bR);
        list7.add(s7bRR);
        head.addpoly(list7);
        //triangle from reading
        Point2D.Double sTbL = new Point2D.Double(50, 70);
        Point2D.Double sTtL = new Point2D.Double(50, 50);
        Point2D.Double sTR = new Point2D.Double(70, 70);
        List<Point2D> listT = new ArrayList<Point2D>();
        listT.add(sTbL);
        listT.add(sTtL);
        listT.add(sTR);
        head.addpoly(listT);


        List<List<Point2D>> splitters = new ArrayList<>();
        List<Point2D> Line1 = new ArrayList<>();
        Line1.add(s1bL);
        Line1.add(s1bR);
        List<Point2D> Line2 = new ArrayList<>();
        Line2.add(s2bR);
        Line2.add(s2tR);
        List<Point2D> Line3 = new ArrayList<>();
        Line3.add(s3bL);
        Line3.add(s3tL);
        List<Point2D> Line4 = new ArrayList<>();
        Line4.add(s4tL);
        Line4.add(s4tR);
        List<Point2D> Line5 = new ArrayList<>();
        Line5.add(sTbL);
        Line5.add(sTtL);
        List<Point2D> Line6 = new ArrayList<>();
        Line6.add(sTtL);
        Line6.add(sTR);
        List<Point2D> Line7 = new ArrayList<>();
        Line7.add(sTR);
        Line7.add(sTbL);
        splitters.add(Line1);
        splitters.add(Line2);
        splitters.add(Line3);
        splitters.add(Line4);
        splitters.add(Line5);
        splitters.add(Line6);
        splitters.add(Line7);
        List<List<Point2D>> input_After_Choice = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        System.out.println("What line do you want to split first, 1-7");
        int splitfirst = scanner.nextInt();
        input_After_Choice.add(splitters.get(splitfirst - 1));
        for (int n = 0; n < splitters.size(); n++){
            if (splitfirst - 1 == n){
                continue;
            }
            input_After_Choice.add(splitters.get(n));
        }
        head.spitsInNode = input_After_Choice;
        System.out.println(head.spitsInNode);
        improved.recursivelysplit(head);
        head.toString(0);
    }
}
